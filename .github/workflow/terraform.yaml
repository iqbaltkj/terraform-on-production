name: 'Terraform CI/CD'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform Plan and Apply/Destroy'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11 # Specify your desired Terraform version

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Set up gcloud CLI'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true

    - name: 'Determine Changed Directories'
      id: changes
      run: |
        MODIFIED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '.*\.tf$' | sed 's|/[^/]*$||' | uniq)
        echo "::set-output name=modified_dirs::$MODIFIED_DIRS"

        DELETED_DIRS=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} | grep '^D' | grep '.*\.tf$' | sed 's|D\s*||' | sed 's|/[^/]*$||' | uniq)
        echo "::set-output name=deleted_dirs::$DELETED_DIRS"

    - name: 'Terraform Init and Plan'
      run: |
        for dir in ${{ steps.changes.outputs.modified_dirs }}; do
          (
            cd $dir
            terraform init -backend-config="path=$dir/terraform.tfstate"
            terraform validate
            terraform plan -out=tfplan
          )
        done
      shell: bash

    - name: 'Create Plan Approval Request'
      uses: actions/github-script@v4
      with:
        script: |
          const modifiedDirs = '${{ steps.changes.outputs.modified_dirs }}'.split(' ');
          const deletedDirs = '${{ steps.changes.outputs.deleted_dirs }}'.split(' ');

          if (modifiedDirs.length > 0 || deletedDirs.length > 0) {
            await github.issues.create({
              ...context.repo,
              title: 'Terraform Plan Approval Request',
              body: `Terraform plans are ready for review.\n\n**Modified Directories:**\n${modifiedDirs.join('\n')}\n\n**Deleted Directories:**\n${deletedDirs.join('\n')}\n\nApprove this issue to proceed with \`terraform apply\` or \`terraform destroy\`.`,
              labels: ['terraform', 'approval']
            });
          }

  terraform_apply:
    name: 'Terraform Apply'
    needs: terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'apply'
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Set up gcloud CLI'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true

    - name: 'Run Terraform Apply'
      run: |
        for dir in ${{ steps.changes.outputs.modified_dirs }}; do
          (
            cd $dir
            terraform apply -auto-approve tfplan
          )
        done
      shell: bash

  terraform_destroy:
    name: 'Terraform Destroy'
    needs: terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Set up gcloud CLI'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true

    - name: 'Run Terraform Destroy'
      run: |
        for dir in ${{ steps.changes.outputs.deleted_dirs }}; do
          (
            cd $dir
            terraform init -backend-config="path=$dir/terraform.tfstate"
            terraform destroy -auto-approve
          )
        done
      shell: bash

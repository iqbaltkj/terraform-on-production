name: 'Terragrunt CI/CD'

on:
  push:
    branches:
    - main
  pull_request:
    paths:
    - 'terraform/deployments/**'
    branches:
    - main

jobs:
  terragrunt_plan:
    name: 'Terragrunt Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11 # Specify your desired Terraform version

    - name: 'Install Terragrunt'
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.36.0/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Set up gcloud CLI'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: 'Determine Changed Directories'
      id: changes
      run: |
        MODIFIED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'terraform/deployments/.*\.hcl$' | sed 's|/[^/]*$||' | uniq)
        echo "::set-output name=modified_dirs::$MODIFIED_DIRS"

        DELETED_DIRS=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} | grep '^D' | grep 'terraform/deployments/.*\.hcl$' | sed 's|D\s*||' | sed 's|/[^/]*$||' | uniq)
        echo "::set-output name=deleted_dirs::$DELETED_DIRS"

    - name: 'Terragrunt Init and Plan'
      run: |
        for dir in ${{ steps.changes.outputs.modified_dirs }}; do
          (
            cd $dir
            terragrunt plan -out=tfplan
          )
        done
      shell: bash

  terragrunt_apply:
    name: 'Terragrunt Apply'
    needs: terragrunt_plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: 'Install Terragrunt'
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.36.0/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Set up gcloud CLI'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: 'Run Terragrunt Apply'
      run: |
        for dir in ${{ needs.terragrunt_plan.outputs.modified_dirs }}; do
          (
            cd $dir
            terragrunt apply -auto-approve tfplan
          )
        done
      shell: bash

  terragrunt_destroy:
    name: 'Terragrunt Destroy'
    needs: terragrunt_plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v2

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: 'Install Terragrunt'
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.36.0/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Set up gcloud CLI'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: 'Run Terragrunt Destroy'
      run: |
        for dir in ${{ needs.terragrunt_plan.outputs.deleted_dirs }}; do
          (
            cd $dir
            terragrunt destroy -auto-approve
          )
        done
      shell: bash
